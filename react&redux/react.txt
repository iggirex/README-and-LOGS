REACT.JS

to install CLI React app maker:
    npm install -g create-react-app
to create app:
    create-react-app my-app
to start app run command in root dir:
        npm start
    --> Issues running npm start try:
        --> npm install -g npm@latest to update npm because it is sometimes buggy.
        --> rm -rf node_modules to remove the existing modules.
        --> npm install to re-install the project dependencies.

------------------------------------------------------------------------------------------------------------
React has different kinds of components:
------------------------------------------------------------------------------------------------------------
React.Component subclasses:
    --> The component tells React what to render

            class ShoppingList extends React.Component {
                render() {
                    return (
                    <div className="shopping-list">
                        <h1>Shopping List for {this.props.name}</h1>
                        <ul>
                        <li>Instagram</li>
                        <li>WhatsApp</li>
                        <li>Oculus</li>
                        </ul>
                    </div>
                    );
                }
                }

    --> here ShoppingList is a REACT COMPONENT CLASS (component type).
    --> components take in parameters called PROPS and returns a hierarchy of views to display via render()


    --> Most React devs use a special syntex called JSX, makes it easier to write these structures  

            return React.createElement('div', {className: 'shopping-list'},
                React.createElement('h1', /* ... h1 children ... */),
                React.createElement('ul', /* ... ul children ... */)
            );


When you want to aggregate data from multiple children or to have two child 
components communicate with each other, move the state upwards so that it lives in the parent component.

If component is does not have state, it doesn't need constructor



------------------------------------------------------------------------------
------------------------------------------------------------------------------
------------------------------------------------------------------------------

React is library that produces html for user to see
Uses components/views are snippets of code that produces HTML
React code is writing multiple different components 
nested together in diff fashions to make really complex apps really simple

COMPONENT - A collection of JS functions that produce HTML
        --> ALWAYS MAKE ONE COMPONENT PER FILE

BUNDLE.JS ---> Compiled Javascript, the entirety of a Reach application
                Compiled to JS that the browser can understand

Webpack + Babel grab all JS files in a project, 
put them into a single file and makes them available as undle.js


SIMPLEST RENDER TO PAGE INDEX.JS ===============================================

//Core React functionality in React Library
import React from 'react';
//DOM rendering functionality is diff library: ReactDOM
import ReactDOM from 'react-dom';


//Create a new component. This component should produce 

// const App = function(){
//     return <div>Hi!</div>;
// }
//We pass AN INSTANCE TO REACT DOM,
//not a class
const App = () => {
    return <div>Hi!</div>;
}


//JSX is this html-looking stuff, it's still JS
//the real html will not look exaclty like this

//Take this component's generated HTML and put it
//on the page (in the DOM)
// !!! THIS IS WRONG -- React library does not render to DOM
// React.render(App);

// Correct/, ReactDOM is the library that renders to the DOM
// ReactDOM.render(App)
//WRONG App is a class, classes do not get rendered

//Correct -- <App></App> is an instance of App class
// can be shortened to <App /> since theren's nothing inside
//ReactDOM.render(<App />);   // ERROR TARGET containeer is not a DOM element

const container = document.getElementsByClassName('container')
//Correct, add second argument to specify where to put jsx
ReactDOM.render(<App />, container[0]);
ReactDOM.render(<App />, document.querySelector('.container'));
===============================================================================

EXPORTING MODULES

    search_bar.js:
            //We aren't directly calling React here, but remember
            //JSX turns our html-looky stuff to React.createElement(blabla) !!!
            import React from 'react';

            const SearchBar = () => {
                return <input />; // no need to close input, nothing in it
            }
            // this is called FUNCTIONAL COMPONENT, function that shoots out JSX

            // how to give access to SearchBar from other files !!!
            export default SearchBar;

    index.js:
            //we don't specify PATH for libraries, they can't have dupe names
            import React from 'react';
            import ReactDOM from 'react-dom';

            //this is how we IMPORT COMPONENTS
            import SearchBar from './components/search_bar';
            //for FILES WE CREATE we have to include PATH, there could be many diff search_bar.js's

            const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

            const App = () => {
                // return parens are optional
                return (
                    <div>
                        <SearchBar />
                    </div>
                );
            }
            ReactDOM.render(<App />, document.querySelector('.container'));
===============================================================================

CLASSES
    --> Class components (opposed to functional components) are used
    when we want some sort of record keeping, component is aware of itself

    search_bar.js:
            // import React from 'react';
            import React, { Component} from 'react';
            // we can handle importing React.Component by adding it to import
            // same as doing:
            // const Component = React.Component; curly braces say
            // import React and pull off Component as variable named Component


            // extends gives SearchBar class access to a bunch of functionality 
            //that React.component class has
            // class SearchBar extends React.Component{
                class SearchBar extends Component{
                //(syntax sugar)
                // since React.Component was already imported, can just say Component 


                //still needs to render itself somehow, so we define a
                // RENDER METHOD in the class, every REact class needs one
                render() {  // this acts like render: function() {}
                    return <input />;
                }
            }
            export default SearchBar;
    
    index.js: stays exactly the same
===============================================================================

EVENT HANDLER

        search_bar.js:
            import React, { Component} from 'react';

            class SearchBar extends Component {
                render() {
                    return <input onChange={this.onInputChange} />;
                    // to handle vanilla JS events, write on<name of event>={event handler}
                    // JSX as JS variables needs to be wrapped in curly braces
                    // onChange is a "property" or "prop" of the input element
                }
                //define another method as an event handler
                onInputChange(event) { //generally called 'handle' or 'on'
                    // all browser events pass down an "event" object
                    console.log(event.target.value)
                }
            }

            // above code can be shortened to:
            // return <input onChange={(event) => console.log(event.target.value)} />;
            export default SearchBar;
===============================================================================

STATE
--> state is a plain JS object used to record and react to user events
--each class based component has its own state object
---> whenever a component state is changed, the component re-renders and forces
all its children to re-render

        search_bar.js:
            import React, { Component} from 'react';

            class SearchBar extends Component {
                // ALL JS CLASSES have a special method called constructor
                // constructor function is first and only function called AUTOMATICALY whenever
                // a new instance of class is created
                // constructor does SETUP and INITIALIZES STATE
                constructor(props){
                    // "super" is how we access method of parent class Component
                    super(props);

                    // EACH INSTANCE OF SEARCHBAR CLASS WILL HAVE ITS OWN STATE
                    // this is only place where we'll use this.state =
                    // EVERYWHERE ELSE to change state we'll use "this.setState()"
                    this.state = { term: "" };
                }

                render() {
                    // setState takes an object that will be the new state
                    return(
                        <div>
                            <input onChange={(event) => this.setState({ term: event.target.value })} />
                            Value of input: {this.state.term}
                        </div>
                    );
                    //using this.state.term to REFERENCE, not change state
                    // whenever setState is called, componene is re-rendered, so updates this into DOM
                }
            }
            export default SearchBar;
===============================================================================

CONTROLLED COMPONENTS
    --->CONTROL FIELD is a FORM ELEMENT (like input) whose value is set by state, not other way around

            import React, { Component} from 'react';

            class SearchBar extends Component {
                constructor(props){
                    super(props);

                    this.state = { term: "" };
                }

                render() {
                    // when we add value to component, becomes CONTROLLED COMPONENT
                    // has its value set by state
                    return(
                        <div>
                            <input 
                            value = {this.state.term}
                            onChange={(event) => this.setState({ term: event.target.value })} />
                        </div>
                    );
                    // First thing that happens: index.js creates an instance of SearchBar
                    // Then constructor on SearchBar gives it a state of { term: ''}
                    // When someone types in input, setState changes state, but value of input is not yet changed
                    // we've only called event handler with new value
                    // Event handler runs, updating this.state.term to new value
                    // When setState is called our component immediately re-renders
                    // So when "render" is called again, input value receives updated this.state.term
                }
            }
            // deleting onChange will make input useless, can't type in it


            export default SearchBar;
===============================================================================

DOWNWARDS DATA FLOW
    --> All the React components (in their different files) need to know
    about the data coiming in from youtube API. Who makes the call? how is data shared?

    ---> Downwards data flow means that ONLY THE MOST PARENT COMPONENT should be
    responsible for fetching data. Be API, or Flux or Redux
===============================================================================
TURNING APP INTO CLASS COMPONENT AND ADDING STATE OF VIDEO SEARCH

            import React, { Component } from 'react';
            import ReactDOM from 'react-dom';
            import YTSearch from 'youtube-api-search';
            import SearchBar from './components/search_bar';
            const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

            // We want to convert App from FUNCTIONAL component to CLASS component
            // const App = () => {
            //     return (
            //         <div>
            //             <SearchBar />
            //         </div>
            //     );
            // }
            // change const to class, add extends Component, (import Component up top)
            // and add render method, everything else should work the same
            // now we want to add YTSearch data to state of App, so make state in constructor
            class App extends Component {
                constructor(props) {
                    super(props)

                    // the state will contain the videos from YTSearch
                    this.state = { videos: [] };

                    //YTSearch will be updating, so its DATA CHANGING OVER TIME -> sounds like STATE
                    // Moving YTSearch into constructor so its part of our component state
                    YTSearch({key: API_KEY, term: "surfboards"}, (videos) => {
                        // this.setState({ videos: videos});
                        // ES6 syntax sugar, if an object has the same key and value name do this:
                        this.setState({ videos });
                    });
                }
                render() {
                    return (
                        <div>
                            <SearchBar />
                        </div>
                    );
                }
            }

            ReactDOM.render(<App />, document.querySelector('.container'));
===============================================================================

PASSING PROPS FROM PARENT COMPONENT

index.js

import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import YTSearch from 'youtube-api-search';
import SearchBar from './components/search_bar';
import VideoList from './components/video_list'
const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

class App extends Component {
    constructor(props) {
        super(props)

        this.state = { videos: [] };

        YTSearch({key: API_KEY, term: "surfboards"}, (videos) => {
            this.setState({ videos });
        });
    }
    // imported VideoList up top, now we add it to App under SearchBar
    // VideoList needs access to YTSearch and this.state.videos to render vids list 
    // So we need to pass some data FROM PARENT COMPONENT APP TO CHILD COMPONENT VIDEOLIST
    // we do this by defining a property on the JSX tag (videos={this.state.videos})
    // THIS IS PASSING PROPS!!!!!!!!!!!!!
    render() {
        return (
            <div>
                <SearchBar />
                <VideoList videos={this.state.videos}/>
            </div>
        );
    }
}

ReactDOM.render(<App />, document.querySelector('.container'));



video_list.js

import React from 'react';

// This list is a DUMB LIST -- does not need state, it only shows stuff on App state
// When props are passed in from index.js, they arrive as an argument in the functional component
// arrives as 'props' //// BUT IF THIS WAS A CLASS, it would universally be available
// as this.props
const Videolist = (props) => {
    const videos = props.video;
    return (
        <ul className="col-md-4 list-group">
            {props.videos.length}
        </ul>
    );
};

export default Videolist;
===============================================================================
MAKING EACH VIDEO LIST ITEM COMPONENT AND RENDERING 


video_list.js

            import React from 'react';
            import VideoListItem from './video_list_item';

            // Now we want to loop through videos array, assign each video to "video_list_item" components
            // Build a loop NOT FOR LOOP (JS for loops are not great in general, 
            // instead use built in iterators like MAP)
            const Videolist = (props) => {

                // So we import the VideoListItem component, loop through the props coming in
                // create a new array 'videoItems' containing VideoListItem components to which
                // we pass the video data as props
                const videoItems = props.videos.map((video) => {
                    return <VideoListItem video={video} />
                });

                const videos = props.video;
                // Passing in videoItems in curly braces because it is a JSX variable
                // React is INTELLIGENT WHEN RENDERING ARRAYS OF ITEMS
                return (
                    <ul className="col-md-4 list-group">
                        {videoItems}
                    </ul>
                );
            };

export default Videolist;


            video_list_item.js

            import React from 'react';

            const VideoListItem = (props) => {
                return <li>Video</li>
            }

            export default VideoListItem;
===============================================================================
PROVIDING KEYS FOR COMPONENTS

---> good practice to ALWAYS ADD KEY 

            import React from 'react';
            import VideoListItem from './video_list_item';

            const Videolist = (props) => {

                const videoItems = props.videos.map((video) => {
                    // here we add the key as unique identifier (see comments below)
                    return <VideoListItem key={video.etag} video={video} />
                });

                const videos = props.video;
                // ERROR --  Each child in an array or iterator should have a unique "key" prop
                // React has logic built in for logic for rendering lists BUT NEEDS UNIQUE HANDLERS
                // SO IT KNOWS WHICH ITEMS IN LIST TO UPDATE --- use id's so React knows which components to update
                // COMMON STRATEGY -- use id for each piece of data
                // each video has an 'etag' which is unique identifier
                return (
                    <ul className="col-md-4 list-group">
                        {videoItems}
                    </ul>
                );
            };

            export default Videolist;
===============================================================================

BUILDING UP LIST ITEMS, USING PROPS

        video_list_item:

            import React from 'react';

            // const VideoListItem = (props) => {
            //     const video = props.video;
            //     return <li>Video</li>
            // }

            //ES6 syntax sugar below (does same as above)
            const VideoListItem = ({video}) => {
                // this argument above says --props being passed in has a video property, lets use that

                const imageUrl = video.snippet.thumbnails.default.url;

                // use CURLY BRACES to access JS variable inside JSX
                return (
                    <li className="list-group-item">
                        <div className="video-list media">
                            <div className="media-left">
                                <img className="media-object" src={imageUrl} alt=""/>
                            </div>

                            <div className="media-body">
                                <div className="media-heading">{video.snippet.title}</div>
                            </div>    
                        </div>
                    </li>
                );
            };

            export default VideoListItem;
===============================================================================

BUILDING NEW COMPONENTS AND WAITING FOR DATA:

    ---> ALWAYS ask yourself, do I expect this component to need to maintain any type of state
    ---> the video_detail component will only need video title, descript, and url ---> all passed
    in from props DONT REALLY NEED ANY STATE ---> use functional component


        index.js:

            import React, { Component } from 'react';
            import ReactDOM from 'react-dom';
            import YTSearch from 'youtube-api-search';
            import SearchBar from './components/search_bar';
            import VideoList from './components/video_list';
            import VideoDetail from './components/video_detail';
            const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

            class App extends Component {
                constructor(props) {
                    super(props)

                    this.state = { videos: [] };

                    YTSearch({key: API_KEY, term: "surfboards"}, (videos) => {
                        this.setState({ videos });
                    });
                }
                render() {
                    // VideoList component can iterate over the array of videos, but how will VideoDetail
                    // know which data to render??? ASYNC ERROR ---> rendering things before they come in
                    // REACT wants to RENDER STUFF IMMEDIATELY, some parent components can't get info fast
                    // enough for child components
                    // Inside of VideoDetail file, we will add a check 
                    return (
                        <div>
                            <SearchBar />
                            <VideoDetail video={this.state.videos[0]}/>
                            <VideoList videos={this.state.videos}/>   
                        </div>
                    );
                }
            }

            ReactDOM.render(<App />, document.querySelector('.container'));

    video_detail.js:

            import React from 'react';

            const VideoDetail = ({video}) => {

                // this will handle React rendering page before videos get loaded
                // return statement means none of the rest of the code will run --> avoid ERROR of id
                // of undefined
                if(!video){
                    // we don't want 10 million spinners (waiting signs) so one on a parent comp is good
                    return <div>Loading...</div>;
                }

                const videoId = video.id.videoId;
                const url = `https://www.youtube.com/embed/${videoId}`;

                return (
                    <div className="video-detail col-md-8">
                        <div className="embed-responsive embed-responsive-16by9">
                            <iframe className="embed-responsive-item" src={url} frameborder="0"></iframe>
                        </div>
                        <div className="details">
                            <div>{video.snippet.title}</div>
                            <div>{video.snippet.description}</div>
                        </div>
                    </div>
                )
            }

            export default VideoDetail
===============================================================================

ADDIGN SELECTED VIDEO FEATURE AND PASSING IT TO DATA TO VIDEO DETAILS
===============================================================================

CHANGING PARENT STATE FROM CHILD COMPONENT (CHILD TO PARENT COMMUNICATION)

--> BASICALLY, CHILDREN COMPONENTS NEED TO CHANGE THE PARENT STATE, BUT THEY ARE CLASSES AND DON'T
HAVE ACCESS TO THIS.STATE
---> SO THE PARENT MUST PASS DOWN A FUNCTION TO THE CHILD COMPONENT, SO IT HAS A HANDLE WITH WHICH
TO CHANGE THE PARENT STATE WITH

---> Child-to-parent communication is a little more complicated. The standard way of doing this is to 
have the parent pass a function to the child through props. The child then calls this function at some 
point and passes it a value that the parent is supposed to react to. We then write the functionality 
for the parent's reaction inside the parent component.

    index.js:
            import React, { Component } from 'react';
            import ReactDOM from 'react-dom';
            import YTSearch from 'youtube-api-search';
            import SearchBar from './components/search_bar';
            import VideoList from './components/video_list';
            import VideoDetail from './components/video_detail';
            const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

            class App extends Component {
                constructor(props) {
                    super(props)

                    // We'll add selected video to state, and start it off as null
                    this.state = { 
                        videos: [],
                        selectedVideo: null
                    };

                    YTSearch({key: API_KEY, term: "surfboards"}, (videos) => {
                        // adding selected video, will be video object and always passed into VideoDetail
                        // to update selected video we'll pass a CALLBACK from APP to VIDEOLIST and then 
                        // from VideoList into VideoListItem
                        // whenever VideoListItem is clicked it will run the callback with video that belongs to it

                        this.setState({ 
                            videos: videos,
                            selectedVideo: videos[0]
                        });
                    });
                }
                render() {
                    // Adding a CALLBACK TO VIDEOLIST, it will setState on App
                    // HERE WE PASS DOWN A SETSTATE FUNCTION TO VIDEOLIST WHICH HANDS IT TO
                    //VIDEOLISTITEM. SO WHEN VIDEOLISTITEM GETS CLICKED, IT CAN CHANGE THE
                    //PARENT STATE 'SELECTEDVIDEO' TO THE VIDEO OBJ THAT GOT CLICKED
                    return (
                        <div>
                            <SearchBar />
                            <VideoDetail video={this.state.selectedVideo}/>
                            <VideoList 
                                onVideoSelect={selectedVideo => this.setState({selectedVideo}) }
                                videos={this.state.videos}
                            />   
                        </div>
                    );
                }
            }

            ReactDOM.render(<App />, document.querySelector('.container'));

    video_list.js:

            import React from 'react';
            import VideoListItem from './video_list_item';

            const Videolist = (props) => {

                const videoItems = props.videos.map((video) => {
                    // Here we will take the prop coming from VideoList (in App component) and 
                    // passing it down to VideoListItem (which will know what video gets clicked)
                    return (
                        <VideoListItem
                            onVideoSelect={props.onVideoSelect}
                            key={video.etag} 
                            video={video} 
                        />
                    )
                });

    video_list_item.js:

            import React from 'react';

            // So now VideoList Item has access to onVideoSelect:
            const VideoListItem = ({video, onVideoSelect}) => {

                const imageUrl = video.snippet.thumbnails.default.url;
                // ADDING ONCLICK FUNCTIONALITY TO PASS CLICKED VIDEO UP TO THE PARENT'S STATE
                return (
                    <li className="list-group-item" onClick={ () => onVideoSelect(video) }>
                        <div className="video-list media">
                            <div className="media-left">
                                <img className="media-object" src={imageUrl} alt=""/>
                            </div>

                            <div className="media-body">
                                <div className="media-heading">{video.snippet.title}</div>
                            </div>    
                        </div>
                    </li>
                );
            };

            export default VideoListItem;
===============================================================================

MAKING SEARCHBAR WORK (MORE CHILD TO PARENT COMMUNICATION)

---> adding function to App class, then handing it down

        index.js:
            import React, { Component } from 'react';
            import ReactDOM from 'react-dom';
            import YTSearch from 'youtube-api-search';
            import SearchBar from './components/search_bar';
            import VideoList from './components/video_list';
            import VideoDetail from './components/video_detail';
            const API_KEY = "AIzaSyBsX85XkZym24Kioz9iqQXmSG2ktLtTBdY";

            class App extends Component {
                constructor(props) {
                    super(props)

                    this.state = { 
                        videos: [],
                        selectedVideo: null
                    };
                    // TOOK out YTSearch, but we still want constructor to initialize a search
                    this.videoSearch('surfboards');
                }
                
                // Defining NEW CALLBACK for new video searches to pass down in render
                videoSearch(term) {
                    YTSearch({key: API_KEY, term: term}, (videos) => {
                        this.setState({ 
                            videos: videos,
                            selectedVideo: videos[0]
                        });
                    });
                }

                render() {
                    return (
                        <div>
                            <SearchBar onSearchTermChange={term => this.videoSearch(term)} />
                            <VideoDetail video={this.state.selectedVideo}/>
                            <VideoList 
                                onVideoSelect={selectedVideo => this.setState({selectedVideo}) }
                                videos={this.state.videos}
                            />   
                        </div>
                    );
                }
            }

            ReactDOM.render(<App />, document.querySelector('.container'));


        search_bar.js:
            import React, { Component} from 'react';

            class SearchBar extends Component {
                constructor(props){
                    super(props);

                    this.state = { term: "" };
                }

                render() {
                    return(
                        <div className="search-bar">
                            <input 
                                value = {this.state.term}
                                onChange={event => this.onInputChange(event.target.value)} />
                        </div>
                    );
                }
                // Adding a method down here to reference THIS.PROPS.onSearchTermChange and
                // pass it the term
                onInputChange(term) {
                    this.setState({term});
                    this.props.onSearchTermChange(term);
                }
            }

            export default SearchBar;
===============================================================================


===============================================================================
===============================================================================
===============================================================================

REDUX

--> predictable state container for JS applications

--> There is no intrinsic connection between React and Redux, need a library just to join the two
called React-Redux

--> A collection of all the data relates to the app --> List of videos, which video is selected
--> ALl data is centralized into a central single object, THE STATE

--> Design a COMPONENT AS A CONTAINER
===============================================================================

CONTAINER 
--> git is a React component that has direct connection to the state managed by Redux

===============================================================================

REDUCERS

--> A reducer is a function that returns a piece of an applications state
--> An app can have many pieces of state, so the same amount of reducers
===============================================================================

ACTIONS AND ACTION CREATORS

--> These are for changing State
