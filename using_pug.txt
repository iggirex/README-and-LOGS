This README is to help understand how to use Pug and work arounds for any pain points

PUG is BETTER KNOWN as JADE (name change because copyright issues)
-- any information found about Jade will also apply to Pug, it's the same thing


---> It's possible to add inline JS in Pug using a dash

    - console.log(alarm.alarm_type.S)   // This show in server console, not in browser tools
    - var this = that


---------->>>> PROBLEM HANDING DATA FROM PUG FRONT END TO HTML D3.JS SCRIPTS

    ---->>> #{} is used in pug code
    ---->>> !{} is used in JS scripts inside pug code

        var thing = !{data}[0].id
        console.log("this is thing", thing)
        console.log("entire large message: ", !{data}[0].id)

        ---->> JADE/PUG doesn't want to pass it's data it gets from the server to a JS script
        ---->> turns it into a string, also replaces all quote marks with &quot

        THIS WORKS!!:

        FIRST JSON stringify on server:

            router.get("/", function(req, res, next) {
              res.render("chart", {data: JSON.stringify(dbData)});
            });

        SECOND, declare it script inside of !{}:

            var data = !{data};

---------->>>>>>> Iterating inside objects using Jade loops

    --->>> In this example, siteTanks is:
        [ { '84382801': { LEVEL: [Object], VOLUME: [Object] } },
          { '84382802': { LEVEL: [Object], VOLUME: [Object] } } ]

          To get '84382801', you can do this in Jade/Pug:

                each tank in siteTanks
                  th #{Object.keys(tank)}
